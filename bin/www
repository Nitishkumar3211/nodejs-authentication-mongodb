#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-mongodb:server');
var http = require('http');
const InitiateMongoServer = require("../models/index");
const User = require("../models/user.model");
const bcrypt = require("bcryptjs");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Initiate Mongo Server
InitiateMongoServer()
    .then(() => {


        User.findOne({
            isAdmin: true
        }).then(adminData => {
            if (!adminData) {

                const admin = new User({
                        isAdmin: true,
                        name: "Admin",
                        username: "admin",
                        email: "admin@admin.com"
                    })
                    // const salt = bcrypt.genSalt(10);
                let adminpassword = 'admin';
                bcrypt.hash(adminpassword, 12).then((hash_pass) => {
                    admin.password = hash_pass
                    admin.save().then(response => {

                        server.listen(port);
                        server.on('error', onError);
                        server.on('listening', onListening);

                    }).catch(err => {
                        console.log("Unable to create admin!", err);
                        process.exit();
                    });
                }).catch(err => {
                    console.log("Unable to create hash!", err);
                    process.exit();
                });


            } else {

                server.listen(port);
                server.on('error', onError);
                server.on('listening', onListening);
            }



        }).catch(err => {
            console.log("Unable to create admin!", err);
            process.exit();
        });

    })
    .catch(err => {
        console.log("Cannot connect to the database!", err);
        process.exit();
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}